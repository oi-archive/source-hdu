{"title":"Code Formatting","time_limit":1000,"memory_limit":64,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=5472","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=5472&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=5472","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=5472"},"statement":[{"title":"Problem Description","content":"As&#xA0;we&#xA0;all&#xA0;know,&#xA0;a&#xA0;piece&#xA0;of&#xA0;code&#xA0;may&#xA0;include&#xA0;<b>variable</b>,&#xA0;<b>function</b>&#xA0;and&#xA0;some&#xA0;other&#xA0;<b>program&#xA0;statements</b>&#xA0;such&#xA0;as&#xA0;<b>if</b>,&#xA0;<b>else</b>,&#xA0;<b>while</b>,&#xA0;<b>for</b>,&#xA0;etc.&#xA0;&#xA0;<br>Usually&#xA0;we&#xA0;cannot&#xA0;guarantee&#xA0;our&#xA0;code&#xA0;is&#xA0;absolutely&#xA0;right.&#xA0;When&#xA0;you&#xA0;didn&apos;t&#xA0;get&#xA0;the&#xA0;verdict&#xA0;-&#xA0;&apos;Accepted&apos;,&#xA0;you&#xA0;would&#xA0;start&#xA0;debugging.&#xA0;So&#xA0;in&#xA0;ACMICPC&#xA0;contests,&#xA0;we&#xA0;have&#xA0;team-mates&#xA0;to&#xA0;help&#xA0;us.&#xA0;&#xA0;<br>When you copy a program to windows from linux and open it with notepad, you can see all in one line.<br>Of course, the code can be compiled with g++ on linux, but it&apos;s not formatted, so it&apos;s too hard to read it.<br>Now you are given a piece of code, and your task is to format the code to make it good.<br><br>To&#xA0;make&#xA0;it&#xA0;simple,&#xA0;we&#xA0;define&#xA0;the&#xA0;code&#xA0;only&#xA0;contain&#xA0;<b>header&#xA0;file</b>,&#xA0;<b>variable</b>,&#xA0;<b>function</b>,&#xA0;<b>if</b>,&#xA0;<b>for</b>,&#xA0;<b>printf</b>,&#xA0;<b>scanf</b>,&#xA0;and&#xA0;<b>expression(e.g.&#xA0;a&#xA0;=&#xA0;b&#xA0;+&#xA0;1)</b>&#xA0;&#xA0;<br>Also&#xA0;a&#xA0;piece&#xA0;of&#xA0;code&#xA0;is&#xA0;called&#xA0;good&#xA0;if&#xA0;it&#xA0;obey&#xA0;as&#xA0;follows:<br>1.&#xA0;header&#xA0;file<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A&#xA0;space&#xA0;between&#xA0;<b>#include</b>&#xA0;and&#xA0;<b>&lt;XXX&gt;</b>&#xA0;is&#xA0;required.&#xA0;And&#xA0;<b>XXX</b>&#xA0;in&#xA0;<b>&lt;&gt;</b>&#xA0;can&#xA0;be&#xA0;any&#xA0;correct&#xA0;header&#xA0;file.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;You&#xA0;can&#xA0;only&#xA0;declare&#xA0;one&#xA0;header&#xA0;file&#xA0;in&#xA0;one&#xA0;line.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;It&#xA0;is&#xA0;guaranteed&#xA0;that&#xA0;all&#xA0;header&#xA0;files&#xA0;declaration&#xA0;are&#xA0;at&#xA0;the&#xA0;very&#xA0;beginning&#xA0;of&#xA0;the&#xA0;code.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A&#xA0;blank&#xA0;line&#xA0;is&#xA0;required&#xA0;after&#xA0;all&#xA0;header&#xA0;files&#xA0;if&#xA0;header&#xA0;files&#xA0;exist.<br>2.&#xA0;variable&#xA0;declaration&#xA0;&#xA0;<br><b>X&#xA0;A,&#xA0;B,&#xA0;C,&#xA0;...;</b><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Assuming&#xA0;that&#xA0;<b>X</b>&#xA0;can&#xA0;be&#xA0;only&#xA0;<b>int</b>,&#xA0;<b>double</b>,&#xA0;<b>bool</b>&#xA0;or&#xA0;<b>char</b>, and there must be at least one space after X.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;You&#xA0;can&#xA0;only&#xA0;declare&#xA0;one&#xA0;type&#xA0;of&#xA0;variable&#xA0;in&#xA0;one&#xA0;line.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;The&#xA0;comma(<b>,</b>)&#xA0;is&#xA0;used&#xA0;to&#xA0;split&#xA0;variables&#xA0;in&#xA0;one&#xA0;type&#xA0;in&#xA0;one&#xA0;line.&#xA0;And&#xA0;a&#xA0;space&#xA0;is&#xA0;required&#xA0;after&#xA0;the&#xA0;comma(<b>,</b>).<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;It&#xA0;is&#xA0;guaranted&#xA0;that&#xA0;there&#xA0;must&#xA0;be&#xA0;a&#xA0;space&#xA0;between&#xA0;<b>X</b>&#xA0;and&#xA0;<b>A</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>A</b>,&#xA0;<b>B</b>,&#xA0;<b>C</b>,&#xA0;...,&#xA0;are&#xA0;the&#xA0;name&#xA0;of&#xA0;variable,&#xA0;and&#xA0;guarantee&#xA0;that&#xA0;no&#xA0;calculation,&#xA0;just&#xA0;declaration.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;The&#xA0;name&#xA0;of&#xA0;variable&#xA0;can&#xA0;be&#xA0;any&#xA0;<b>except&#xA0;&quot;scanf&quot;&#xA0;and&#xA0;&quot;printf&quot;</b>.<br>3.&#xA0;function&#xA0;&#xA0;<br><b>X&#xA0;Y(A&#xA0;a,&#xA0;B&#xA0;b,&#xA0;...){}</b><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>X</b>&#xA0;is&#xA0;the&#xA0;type&#xA0;of&#xA0;the&#xA0;function,&#xA0;which&#xA0;can&#xA0;be&#xA0;4&#xA0;variables&#xA0;above&#xA0;plus&#xA0;<b>void</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>Y</b>&#xA0;is&#xA0;the&#xA0;name&#xA0;of&#xA0;the&#xA0;function,&#xA0;which&#xA0;can&#xA0;be&#xA0;any&#xA0;<b>except&#xA0;&quot;scanf&quot;&#xA0;and&#xA0;&quot;printf&quot;</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>A</b>&#xA0;and&#xA0;<b>B</b>&#xA0;the&#xA0;type&#xA0;of&#xA0;variable&#xA0;<b>a</b>&#xA0;and&#xA0;<b>b</b>,&#xA0;and&#xA0;<b>a</b>,&#xA0;<b>b</b>&#xA0;is&#xA0;the&#xA0;name&#xA0;which&#xA0;can&#xA0;be&#xA0;any.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A&#xA0;space&#xA0;is&#xA0;required&#xA0;between&#xA0;<b>X</b>&#xA0;and&#xA0;<b>Y</b>,&#xA0;<b>A</b>&#xA0;and&#xA0;<b>a</b>,&#xA0;<b>B</b>&#xA0;and&#xA0;<b>b</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>...</b>&#xA0;means&#xA0;if&#xA0;the&#xA0;function&#xA0;have&#xA0;more&#xA0;parameters,&#xA0;the&#xA0;format&#xA0;is&#xA0;the&#xA0;same&#xA0;as&#xA0;above.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;There&#xA0;can&#xA0;be&#xA0;any&#xA0;parameters(0&#xA0;included)&#xA0;in&#xA0;each&#xA0;function.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;It&#xA0;is&#xA0;guaranteed&#xA0;that&#xA0;there&#xA0;will&#xA0;be&#xA0;a&#xA0;space&#xA0;between&#xA0;<b>X</b>&#xA0;and&#xA0;<b>Y</b>.<br>A space is required after each &quot;,&quot;.<br>4.&#xA0;if&#xA0;&#xA0;<br><b>if(X){}</b><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>X</b>&#xA0;is&#xA0;an&#xA0;expression<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;There&#xA0;must&#xA0;be&#xA0;<b>{</b>&#xA0;and&#xA0;<b>}</b>&#xA0;after&#xA0;<b>if(X)</b>.<br>5.&#xA0;for&#xA0;&#xA0;<br><b>for(X;&#xA0;Y;&#xA0;Z){}</b><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>X</b>,&#xA0;<b>Y</b>,&#xA0;<b>Z</b>&#xA0;are&#xA0;three&#xA0;expressions&#xA0;split&#xA0;by&#xA0;<b>;</b>,&#xA0;and&#xA0;a&#xA0;space&#xA0;is&#xA0;required&#xA0;after&#xA0;each&#xA0;<b>;</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;There&#xA0;must&#xA0;be&#xA0;<b>{</b>&#xA0;and&#xA0;<b>}</b>&#xA0;after&#xA0;<b>for(X;&#xA0;Y;&#xA0;Z)</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>X</b>, <b>Y</b>, <b>Z</b> can be empty (e.g. <b>for(; ; )</b>, <b>for(X; ; Z)</b>, <b>for(; Y; )</b>, etc)<br>6.&#xA0;printf&#xA0;&#xA0;<br><b>printf(&quot;X&quot;,&#xA0;Y,&#xA0;Z,&#xA0;...);</b><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>X</b>&#xA0;in&#xA0;<b>&quot;&quot;</b>&#xA0;is&#xA0;a&#xA0;string&#xA0;which&#xA0;you&#xA0;shouldn&apos;t&#xA0;change&#xA0;it.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>Y,&#xA0;Z,&#xA0;...</b>&#xA0;are&#xA0;expressions&#xA0;split&#xA0;by&#xA0;<b>,</b>,&#xA0;and&#xA0;a&#xA0;space&#xA0;is&#xA0;required&#xA0;after&#xA0;each&#xA0;<b>&quot;,&quot;</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;The&#xA0;number&#xA0;of&#xA0;expressions&#xA0;can&#xA0;be&#xA0;0&#xA0;or&#xA0;more.<br>7.&#xA0;scanf&#xA0;&#xA0;<br><b>scanf(&quot;X&quot;,&#xA0;&amp;Y,&#xA0;Z,&#xA0;...);</b><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Abosolutely&#xA0;the&#xA0;same&#xA0;with&#xA0;<b>printf</b><br>8.&#xA0;expression&#xA0;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;There&#xA0;could&#xA0;be&#xA0;<b>variables</b>,&#xA0;<b>operator</b>(<b>+</b>,&#xA0;<b>-</b>,&#xA0;<b>*</b>,&#xA0;<b>/</b>,&#xA0;<b>=</b>,&#xA0;<b>&lt;</b>,&#xA0;<b>&gt;</b>,&#xA0;<b>&gt;=</b>,&#xA0;<b>&lt;=</b>,&#xA0;<b>==</b>,&#xA0;<b>!=</b>)&#xA0;and&#xA0;some&#xA0;<b>constant</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;For&#xA0;each&#xA0;<b>operator</b>,&#xA0;a&#xA0;space&#xA0;is&#xA0;required&#xA0;for&#xA0;both&#xA0;sides.<br>9.&#xA0;function<br><b>X(A,&#xA0;B,&#xA0;C,&#xA0;...);</b><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;You&#xA0;can&#xA0;call&#xA0;a&#xA0;function&#xA0;after&#xA0;your&#xA0;declaration.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Especially,&#xA0;whatever&#xA0;the&#xA0;type&#xA0;your&#xA0;function&#xA0;is,&#xA0;there&#xA0;will&#xA0;be&#xA0;no&#xA0;<b>return</b>&#xA0;in&#xA0;function&apos;s&#xA0;<b>{}</b>.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<b>A,&#xA0;B,&#xA0;C,&#xA0;...</b>&#xA0;are&#xA0;expressions.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Function&#xA0;call&#xA0;cannot&#xA0;appear&#xA0;in&#xA0;expressions.&#xA0;Although&#xA0;this&#xA0;may&#xA0;be&#xA0;rediculous,&#xA0;it&apos;s&#xA0;much&#xA0;more&#xA0;easier&#xA0;for&#xA0;your&#xA0;coding.<br>A space is required after each &quot;,&quot;.<br><br>In&#xA0;addition,&#xA0;there&#xA0;can&#xA0;be&#xA0;many&#xA0;<b>expressions</b>,&#xA0;<b>scanf</b>,&#xA0;<b>print</b>,&#xA0;<b>variable&#xA0;declaration</b>&#xA0;inside&#xA0;<b>{}</b>&#xA0;&#xA0;<br><b>{</b>&#xA0;and&#xA0;<b>}</b>&#xA0;should&#xA0;both&#xA0;take&#xA0;up&#xA0;one&#xA0;line.&#xA0;&#xA0;<br>The&#xA0;rule&#xA0;inside&#xA0;<b>{}</b>&#xA0;is&#xA0;the&#xA0;same,&#xA0;but&#xA0;should&#xA0;start&#xA0;with&#xA0;two&#xA0;more&#xA0;space.<br><br>In&#xA0;all,&#xA0;all&#xA0;characters&#xA0;appear&#xA0;in&#xA0;your&#xA0;code&#xA0;can&#xA0;be&#xA0;only&#xA0;<b>[a-z][A-Z][0-9]&lt;&gt;()\\+-*/=!,;.%&amp;#&quot;&apos;</b>&#xA0;and&#xA0;space.<br><br>The&#xA0;sample&#xA0;involved&#xA0;all&#xA0;rules&#xA0;above.&#xA0;Just&#xA0;have&#xA0;a&#xA0;look&#xA0;at&#xA0;it&#xA0;to&#xA0;unstander&#xA0;better.<br><br>It&#xA0;is&#xA0;guaranteed&#xA0;that&#xA0;the&#xA0;code&#xA0;after&#xA0;formatting&#xA0;can&#xA0;be&#xA0;compiled&#xA0;by&#xA0;g++,&#xA0;so&#xA0;your&#xA0;task&#xA0;is&#xA0;only&#xA0;to&#xA0;format&#xA0;it!","type":"description","format":"html","require":["katex"]},{"title":"Input","content":"Multiple cases(no more than 100), each case is a piece of code in one line. <br>The length of each piece of code, which in one line, is no more than 1000.","type":"input_format","format":"html","require":["katex"]},{"title":"Output","content":"For each case, please output <b>Case #k:</b> in one line first, which <b>k</b> starts from <b>1</b>.  <br>And then please output the code which is called good.  ","type":"output_format","format":"html","require":["katex"]},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">2\n#include &lt;cstdio&gt;#include&lt;cstdlib&gt; #include&lt;cstring&gt;int max;void Solve(int a,int b){ if ( a&gt;max){max=a;} if   ( b &gt; max){max=b;}} int n,m;double x;int main() {scanf(&quot;%d&quot;, &amp;n); int i;for(i=0; i&lt;n;i=i+1) { int a; a=i+1;printf(&quot;a=%d&quot;,    a);Solve(i,i+1);} printf(&quot;%d\\n&quot;, max);printf(&quot;example with no parameter.&quot;);  }\n#include &lt; cstdio  &gt; int main(){printf(&quot;\\&quot;&quot;);}</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">Case #1:\n#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n\nint max;\nvoid Solve(int a, int b)\n{\n  if(a &gt; max)\n  {\n    max = a;\n  }\n  if(b &gt; max)\n  {\n    max = b;\n  }\n}\nint n, m;\ndouble x;\nint main()\n{\n  scanf(&quot;%d&quot;, &amp;n);\n  int i;\n  for(i = 0; i &lt; n; i = i + 1)\n  {\n    int a;\n    a = i + 1;\n    printf(&quot;a=%d&quot;, a);\n    Solve(i, i + 1);\n  }\n  printf(&quot;%d\\n&quot;, max);\n  printf(&quot;example with no parameter.&quot;);\n}\nCase #2:\n#include &lt;cstdio&gt;\n\nint main()\n{\n  printf(&quot;\\&quot;&quot;);\n}</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=2015+ACM%2FICPC+Asia+Regional+Shanghai+Online&amp;source=1&amp;searchmode=source\"> 2015 ACM/ICPC Asia Regional Shanghai Online </a> ","type":"source","format":"html","require":["katex"]}]}