{"title":"Strategy","time_limit":1000,"memory_limit":32,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=1647","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=1647&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=1647","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=1647"},"statement":[{"title":"Problem Description","content":"A well known psychology experiment involves people playing a game in which they can either trade with each other or attempt to cheat the other player. If both players TRADE then each gains one point. If one TRADEs and the other CHEATs then the TRADEr loses 2 points and the CHEATer wins 2. If both CHEAT then each loses 1 point. <br><br><br>There are a variety of different strategies for playing this game, although most people are either unable to find a winning strategy, or, having decided on a strategy, do not stick to it. Thus it is fairer to attempt to evaluate these strategies by simulation on a computer. Each strategy is simulated by an automaton. An automaton is characterised by a program incorporating the strategy, a memory for previous encounters and a count reflecting the score of that automaton. The count starts at zero and is altered according to the above rules after each encounter. The memory is able to determine what happened on up to the last two encounters with each other contender. <br><br><br>Write a program that will read in details of up to 10 different strategies, play each strategy against each other strategy 10 times and then print out the final scores. Strategies will be in the form of simple programs obeying the following grammar: <br><br><br>&lt;program&gt; ::= &lt;statement&gt;. <br>&lt;statement&gt; ::= &lt;command&gt;  &lt;ifstat&gt; <br>&lt;ifstat&gt; ::= IF &lt;condition&gt; THEN &lt;statement&gt; ELSE &lt;statement&gt; <br>&lt;condition&gt; ::= &lt;cond&gt;  &lt;cond&gt; &lt;op&gt; &lt;condition&gt; <br>&lt;op&gt; ::= AND  OR <br>&lt;cond&gt; ::= &lt;memory&gt; {=  #} {&lt;command&gt;  NULL} <br>&lt;memory&gt; ::= {MY  YOUR} LAST {1  2} <br>&lt;command&gt; ::= TRADE  CHEAT <br>Note that LAST1 refers to the previous encounter between these two automata, LAST2 to the encounter before that and that `MY&apos; and `YOUR&apos; have the obvious meanings. Spaces and line breaks may appear anywhere in the program and are for legibility only. The symbol `#&apos; means `is not equal to&apos;. NULL indicates that an encounter has not ocurred. The following are valid programs: <br><br><br>CHEAT.<br>IF MY LAST1 = CHEAT THEN TRADE ELSE CHEAT.<br>IFYOURLAST2=NULLTHENTRADEELSEIFYOURLAST1=TRADETHENTRADE<br>ELSECHEAT.<br>","type":"description","format":"html","require":["katex"]},{"title":"Input","content":"Input will consist of a series of programs. Each program will be no longer than 255 characters and may be split over several lines for convenience. There will be no more than 10 programs. The file will be terminated by a line containing only a single `#&apos;. <br><br>","type":"input_format","format":"html","require":["katex"]},{"title":"Output","content":"Output will consist of one line for each line of input. Each line will consist of the final score of the relevant program right justified in a field of width 3. ","type":"output_format","format":"html","require":["katex"]},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">CHEAT.\nIF MY LAST1 = CHEAT THEN TRADE ELSE CHEAT.\nIFYOURLAST2=NULLTHENTRADEELSEIFYOURLAST1=TRADETHENTRADE\nELSECHEAT.\n#</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">  1\n-12\n-13</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=uva&amp;source=1&amp;searchmode=source\"> uva </a> ","type":"source","format":"html","require":["katex"]}]}