{"title":"Simulation?","time_limit":1000,"memory_limit":64,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=4225","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=4225&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=4225","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=4225"},"statement":[{"title":"Problem Description","content":"A computer simulation, a computer model, or a computational model is a computer program, or network of computers, that attempts to simulate an abstract model of a particular system. Computer simulations have become a useful part of mathematical modeling of many natural systems in physics, astrophysics, chemistry and biology, human systems in economics, psychology, social science, and engineering, of course, also computer.<br>&#x201C;Fundamentals of compiling&#x201D; is an important course for computer science students. In this course, most of us are asked to write a compiler to simulate how a programming language executes. Today, boring iSea invites a new programming language, whose name is Abnormal Cute Micro (ACM) language, and, YOU are assigned the task to write a compiler for it.<br>ACM language only contains two kinds of variables and a few kinds of operations or functions, and here are some BNF-like rules for ACM.<br><center><img style=\"max-width:100%;\" src=\"../../data/images/C393-1011-1.jpg\"></center><br><center><img style=\"max-width:100%;\" src=\"../../data/images/C393-1011-2.jpg\"></center><br><center><img style=\"max-width:100%;\" src=\"../../data/images/C393-1011-3.jpg\"></center><br>Also, here is some explanation for these rules:<br>1) In ACM expressions, use exactly one blank to separate variables and operators, and as the rule indicates, the operator should apply right to left, for example, the result of &#x201C;1 - 2 - 3&quot; should be 2.<br>2) In the build function, use exactly one blank to separate integers, too.<br>3) Beside there are brackets in function, no other bracket exists.<br>4) All the variables are conformable, and never exceed 10000.<br>Given an ACM expression, your task is output its value. If the result is a integer, just report it, otherwise report an array using the format &#x201C;{integer_0, integer_1, &#x2026; , integer_n}&#x201D;.<br>","type":"description","format":"html"},{"title":"Input","content":"The first line contains a single integer T, indicating the number of test cases.<br>Each test case includes a string indicating an valid ACM expression you have to process.<br><br><b>Technical Specification</b><br>1. 1 &lt;= T &lt;= 100<br>2. 1 &lt;= |S| &lt;= 100, |S| indicating the length of the string.<br>","type":"input_format","format":"html"},{"title":"Output","content":"For each test case, output the case number first, then the result variable.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">10\n1 + 1\n1 - 2 - 3\ndance(3)\nvary(2) * 2\nvary(sum(dance(5) - 1))\ndance(dance(-3))\n1 - 2 - 3 * vary(dull(build(1 2 3)))\ndance(dance(dance(dance(dance(2)))))\nsum(vary(100)) - sum(build(3038))\nbuild(sum(vary(2)) dull(build(1 0)) 2 dull(dance(2))) - build(1 1 1 1)</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">Case 1: 2\nCase 2: 2\nCase 3: {3, -2, 1}\nCase 4: {2, 4}\nCase 5: {2, 1}\nCase 6: -4\nCase 7: {2, 5}\nCase 8: {4, -3, 2, -1}\nCase 9: 2012\nCase 10: {2, 0, 1, 2}</div></pre>","type":"example","format":"html"},{"title":"Author","content":"iSea@WHU","type":"source","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=%CA%D7%BD%EC%BB%AA%D6%D0%C7%F8%B3%CC%D0%F2%C9%E8%BC%C6%D1%FB%C7%EB%C8%FC%F4%DF%B5%DA%CA%AE%BD%EC%CE%E4%BA%BA%B4%F3%D1%A7%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC&amp;source=1&amp;searchmode=source\"> &#x9996;&#x5C4A;&#x534E;&#x4E2D;&#x533A;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x9080;&#x8BF7;&#x8D5B;&#x66A8;&#x7B2C;&#x5341;&#x5C4A;&#x6B66;&#x6C49;&#x5927;&#x5B66;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x5927;&#x8D5B; </a> ","type":"source","format":"html"}]}