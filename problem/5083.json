{"title":"Instruction","time_limit":1000,"memory_limit":32,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=5083","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=5083&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=5083","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=5083"},"statement":[{"title":"Problem Description","content":"Nowadays, Jim Green has produced a kind of computer called JG. In his computer, the instruction is represented by binary code. However when we code in this computer, we use some mnemonic symbols. For example, ADD R1, R2 means to add the number in register R1 and R2, then store the result to R1. But this instruction cannot be execute directly by computer, before this instruction is executed, it must be changed to binary code which can be executed by computer. Each instruction corresponds to a 16-bit binary code. The higher 6 bits indicates the operation code, the middle 5 bits indicates the destination operator, and the lower 5 bits indicates the source operator. You can see Form 1 for more details.<br>$$\\begin{array} {|c|c|c|}<br>\\hline<br>15 \\quad \\text{ operation code(6 bits)} \\quad 10 &amp; 9 \\quad \\text{destination operator code(5 bits)} \\quad 5 &amp; 4 \\quad \\text{source operator code(5 bits)} \\quad 0\\\\<br>\\hline<br>\\end{array}<br>\\\\ \\text{Form 1}$$<br><br>In JG system there are 6 instructions which are listed in Form 2.<br>$$\\begin{array}{|l|l|}<br>\\hline<br>\\text{instruction} &amp; \\text{function}\\\\ \\hline<br>\\text{ADD Ra,Rb} &amp; \\text{Add the number in register Ra and Rb, then store the result to Ra.}\\\\ \\hline<br>\\text{SUB Ra,Rb} &amp; \\text{Subtract the number in register Ra to Rb, then store the result to Ra.}\\\\ \\hline<br>\\text{DIV Ra,Rb} &amp; \\text{Divide the number in register Ra by Rb, then store the result to Ra.}\\\\ \\hline<br>\\text{MUL Ra,Rb} &amp; \\text{Mulplicate the number in register Ra and Rb, then store the result to Ra.}\\\\ \\hline<br>\\text{MOVE Ra,Rb} &amp; \\text{Move the number in register Rb to Ra.}\\\\ \\hline<br>\\text{SET Ra} &amp; \\text{Set 0 to Ra.}\\\\ \\hline<br>\\end{array}\\\\<br>\\text{Form 2}$$<br><br>Operation code is generated according to Form 3.<br>$$\\begin{array}{|l|l|}<br>\\hline<br>\\text{Operation} \\qquad \\qquad \\qquad &amp; \\text{Operation code} \\qquad \\qquad \\qquad \\qquad \\\\ \\hline<br>\\text{ADD} &amp; \\text{000001}\\\\ \\hline<br>\\text{SUB} &amp; \\text{000010}\\\\ \\hline<br>\\text{DIV} &amp; \\text{000011}\\\\ \\hline<br>\\text{MUL} &amp; \\text{000100}\\\\ \\hline<br>\\text{MOVE} &amp; \\text{000101}\\\\ \\hline<br>\\text{SET} &amp; \\text{000110}\\\\ \\hline<br>\\end{array}\\\\<br>\\text{Form 3}$$<br><br>Destination operator code and source operator code is the register code of the register which is related to.<br>There are 31 registers in total. Their names are R1,R2,R3&#x2026;,R30,R31. The register code of Ri is the last 5 bits of the number of i in the binary system. For eaxample the register code of R1 is 00001, the register code of R2 is 00010, the register code of R7 is 00111, the register code of R10 is 01010, the register code of R31 is 11111.<br>So we can transfer an instruction into a 16-bit binary code easyly. For example, if we want to transfer the instruction ADD R1,R2, we know the operation is ADD whose operation code is 000001, destination operator code is 00001 which is the register code of R1, and source operator code is 00010 which is the register code of R2. So we joint them to get the 16-bit binary code which is 0000010000100010.<br>However for the instruction SET Ra, there is no source register, so we fill the lower 5 bits with five 0s. For example, the 16-bit binary code of SET R10 is 0001100101000000<br>You are expected to write a program to transfer an instruction into a 16-bit binary code or vice-versa.","type":"description","format":"html"},{"title":"Input","content":"Multi test cases (about 50000), every case contains two lines.<br>First line contains a type sign, &#x2018;0&#x2019; or &#x2018;1&#x2019;. <br>&#x2018;1&#x2019; means you should transfer an instruction into a 16-bit binary code;<br>&#x2018;0&#x2019; means you should transfer a 16-bit binary code into an instruction.<br>For the second line.<br>If the type sign is &#x2018;1&#x2019;, an instruction will appear in the standard form which will be given in technical specification; <br>Otherwise, a 16-bit binary code will appear instead.<br>Please process to the end of file.<br><br>[Technical Specification]<br>The standard form of instructions is <br>ADD Ra,Rb<br>SUB Ra,Rb<br>DIV Ra,Rb<br>MUL Ra,Rb<br>MOVE Ra,Rb<br>SET Ra<br>which are also listed in the Form 2.<br>$1 \\leq a, b \\leq 31$<br>There is exactly one space after operation, and exactly one comma between Ra and Rb other than the instruction SET Ra. No other character will appear in the instruction.","type":"input_format","format":"html"},{"title":"Output","content":"For type &#x2018;0&#x2019;&#xFF0C;if the 16-bit binary code cannot be transferred into a instruction according to the description output &#x201C;Error!&#x201D; (without quote), otherwise transfer the 16-bit binary code into instruction and output the instruction in the standard form in a single line.<br>For type &#x2018;1&#x2019;, transfer the instruction into 16-bit binary code and output it in a single line.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">1\nADD R1,R2\n0\n0000010000100010\n0\n1111111111111111</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">0000010000100010\nADD R1,R2\nError!</div></pre>","type":"example","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=BestCoder+Round+%2315&amp;source=1&amp;searchmode=source\"> BestCoder Round #15 </a> ","type":"source","format":"html"}]}