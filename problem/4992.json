{"title":"Primitive Roots","time_limit":2000,"memory_limit":32,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=4992","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=4992&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=4992","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=4992"},"statement":[{"title":"Problem Description","content":"We say that integer x, 0 &lt; x &lt; n, is a primitive root modulo n if and only if the minimum positive integer y which makes x<sup>y</sup> = 1 (mod n) true  is  &#x3C6;(n) .Here &#x3C6;(n) is an arithmetic function that counts the totatives of n, that is, the positive integers less than or equal to n that are relatively prime to n. Write a program which given any positive integer n( 2 &lt;= n &lt; 1000000) outputs all primitive roots of n in ascending order.","type":"description","format":"html"},{"title":"Input","content":"Multi test cases.<br>Each line of the input contains a positive integer n. Input is terminated by the end-of-file seperator.","type":"input_format","format":"html"},{"title":"Output","content":"For each n, outputs all primitive roots of n in ascending order in a single line, if there is no primitive root for n just print -1 in a single line.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">4\n25</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">3\n2 3 8 12 13 17 22 23</div></pre>","type":"example","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=BestCoder+Round+%238&amp;source=1&amp;searchmode=source\"> BestCoder Round #8 </a> ","type":"source","format":"html"}]}