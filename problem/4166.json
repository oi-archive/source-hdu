{"title":"Robot Navigation","time_limit":4000,"memory_limit":64,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=4166","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=4166&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=4166","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=4166"},"statement":[{"title":"Problem Description","content":"A robot has been sent to explore a remote planet. To specify the path the robot should take, a program is sent each day. The program consists of a sequence of the following commands:<br><br>FORWARD: move forward by one unit.<br>TURN LEFT: turn left by 90 degrees. The robot remains at the same location.<br>TURN RIGHT: turn right by 90 degrees. The robot remains at the same location.<br>The robot also has sensor units which allows it to obtain a map of its surrounding area. The map is represented as a grid of M rows and N columns. Each grid point is represented by a coordinate (r,c) where r = 0 is the north edge of the map, r = M-1 is the south edge, c = 0 is the west edge, and c = N-1 is the east edge. Some grid points contain hazards (e.g. craters) and the program must avoid these points or risk losing the robot.<br><br>Naturally, if the initial location and direction of the robot and its destination position are known, we wish to send the shortest program (one consisting of the fewest commands) to move the robot to its destination (we do not care which direction it faces at the destination). You are more interested in knowing the number of different shortest programs that can move the robot to its destination, because we may need to send different sequences as interplanetary communication is not necessarily reliable. However, the number of shortest programs can be very large, so you are satisfied to compute the number as a remainder under some modulus, knowing that something you learned in classes called the Chinese remainder theorem can be used to compute the final answer.","type":"description","format":"html"},{"title":"Input","content":"The input consists of a number of cases. The first line of each case gives three integers M, N, and the modulus m (0 &lt; M, N &lt;= 1000, 0 &lt; m &lt;= 1000000000). The next M lines contain N characters each and specify the map. A &apos;.&apos; indicates that the robot can move into that grid point, and a &apos;*&apos; indicates a hazard. The final line gives four integers r1, c1, r2, c2 followed by a character d. The coordinates (r1, c1) specify the initial position of the robot, and (r2, c2) specify the destination. The character d is one of &apos;N&apos;, &apos;S&apos;, &apos;W&apos;, &apos;E&apos; indicating the initial direction of the robot. It is assumed that the initial position and the destination are not hazards. The input is terminated when m = 0.","type":"input_format","format":"html"},{"title":"Output","content":"For each case, print its case number, the modulus, as well as the remainder of the number of different programs when divided by the modulus m. The output of each case should be on a single line, in the format demonstrated below. If there is no program that can move the robot to its destination, output -1 for the number of different programs.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">3 3 100\n***\n.*.\n***\n1 0 1 2 E\n4 4 100\n****\n*.*.\n*.*.\n*...\n1 1 1 3 N\n4 8 100\n********\n...**...\n*......*\n********\n1 0 1 7 E\n0 0 0</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">Case 1: 100 -1\nCase 2: 100 2\nCase 3: 100 4</div></pre>","type":"example","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=The+2011+Rocky+Mountain+Regional+Contest&amp;source=1&amp;searchmode=source\"> The 2011 Rocky Mountain Regional Contest </a> ","type":"source","format":"html"}]}