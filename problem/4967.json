{"title":"Handling the Past","time_limit":2000,"memory_limit":128,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=4967","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=4967&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=4967","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=4967"},"statement":[{"title":"Problem Description","content":"   Nowadays, cloud computing is a popular topic among business and technology circles. In cloud computing, everything can be stored in a cloud server, and clients deal with the data by sending operation-requests to the server. However, such client-server mode may cause some problems. For example, if you send two operations op1 and op2 to the server, expecting that op1 should be executed first and followed by op2. Due to the network delay, op1 may arrive at the server later than op2. In order to inform the server the correct operation order, each operation is associated with a timestamp. Now if the server gets two operations (op1, t1) and (op2, t2), where t1 &lt; t2, the server will know that op1 should be executed earlier than op2. So, if (op2, t2) arrives first, the server will execute op2 immediately. And when (op1, t1) arrives, the server will find that op1 should be executed before op2 (because t1 &lt; t2), thus it has to undo op2, execute op1, and re-execute op2 finally. <br><br>   In this problem, you are asked to simulate the above process. To simplify the problem, we assume that there is only a stack, a last-in-first-out data structure as you know, stored in the server. Three types of operations are considered, whose formats and semantics are given as follows.<br><br>    push x t -- push x into the stack, and t is a timestamp<br>    pop t -- pop the top element from the stack, and t is a timestamp<br>    peak t -- return the top element in the stack, and t is a timestamp<br><br>   When an operation op with a timestamp t arrives, the server process it in the following three steps:<br><br>    Step 1: undo all the &quot;push&quot; and &quot;pop&quot; operations having timestamp larger than t.<br>    Step 2: execute op.<br>    Step 3: redo all the &quot;push&quot; and &quot;pop&quot; operations which were undone in step 1.<br><br>   The server do not need to undo or redo any &quot;peak&quot; operations. In another word, every &quot;peak&quot; operation is executed only once after it arrives at the server.<br><br>   Given the operations arriving at the server in order, you are asked to simulate the above process. The stack is empty initially. To simplify the problem further, another two assumptions are made:<br><br>   1. All the &quot;pop&quot; operations are valid. In another word, if you simulate the process correctly, no &quot;pop&quot; operations will be performed on an empty stack.<br>   2. All timestamps are different.","type":"description","format":"html"},{"title":"Input","content":"   The input contains multiple test cases.<br><br>   Each case begins with an integer N (1&lt;=N&lt;=50000), indicating the number of operations. The following N lines each contain an operation in one of the following three formats:<br><br>    push x t<br>    pop t<br>    peak t<br>    where 0&lt;=x, t&lt;=10^9.<br><br>   The operations are given in the order in which they arrive at the server.<br>   The input is terminated by N = 0.","type":"input_format","format":"html"},{"title":"Output","content":"   For each case, output &quot;Case #X:&quot; in a line where X is the case number, staring from 1. Then for each &quot;peak&quot; operation, output the answer in a line. If the stack is empty, output -1 instead.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">7\npush 100 3\npush 200 7\npeak 4\npush 50 2\npop 5\npeak 6\npeak 8\n4\npush 25 1\npop 5\npeak 6\npeak 3\n4\npush 10 1\npeak 7\npop 3\npeak 4\n0</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">Case #1:\n100\n50\n200\nCase #2:\n-1\n25\nCase #3:\n10\n-1</div></pre>","type":"example","format":"html"},{"title":"Author","content":"SYSU","type":"source","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=2014+Multi-University+Training+Contest+9&amp;source=1&amp;searchmode=source\"> 2014 Multi-University Training Contest 9 </a> ","type":"source","format":"html"}]}