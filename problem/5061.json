{"title":"Not only STL","time_limit":1000,"memory_limit":32,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=5061","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=5061&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=5061","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=5061"},"statement":[{"title":"Problem Description","content":"As you know in STL there is a function called next_permutation, when you send a array to it, it will Rearranges the elements in the array  into the next lexicographically greater permutation.<br><br>But today we need a next_k_permutation, you may say we can just apply k times next_permutation function to the array. Yes, you are right, but when k is very large it is not efficient enough.<br><br>So you are expected to write a program when given an array and k to find its next_k_permutation.<br>Note the next permutation of the permutation with largest dictionary order is the permutation with the minimum dictionary order. For example next permutation of (3,2,1) is (1,2,3).","type":"description","format":"html"},{"title":"Input","content":"Multi test cases(about 1000). Each case contains two lines. The first line contains two integers n which indicates the length of the permutation and k. The second line contains n integers $a_1, a_2, a_3, \\ldots, a_n$ Process to the end of file.<br>$1 \\leq n \\leq 2000$<br>$1 \\leq k \\leq 10^{12}$<br>$1 \\leq a_i \\leq 2000$","type":"input_format","format":"html"},{"title":"Output","content":"For each case, output the answer in a single line.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">3 1\n1 2 3\n3 1\n1 1 2</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">1 3 2\n1 2 1</div></pre>","type":"example","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=BestCoder+Round+%2312&amp;source=1&amp;searchmode=source\"> BestCoder Round #12 </a> ","type":"source","format":"html"}]}