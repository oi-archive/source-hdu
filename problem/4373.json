{"title":"Mysterious For","time_limit":2000,"memory_limit":64,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=4373","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=4373&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=4373","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=4373"},"statement":[{"title":"Problem Description","content":"MatRush is an ACMer from ZJUT, and he always love to create some special programs. Here we will talk about one of his recent inventions.<br><br>This special program was called &quot;Mysterious For&quot;, it was written in C++ language, and contain several simple for-loop instructions as many other programs. As an ACMer, you will often write some for-loop instructions like which is listed below when you are taking an ACM contest.<br>for (int i = 0; i &lt; n; i++) {<br>&#xA0;&#xA0;for (int j = i; j &lt; n; j++) {<br>&#xA0;&#xA0;&#xA0;&#xA0;for (int k = j; k &lt; n; k++) {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;blahblahblah();<br>&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;}<br>}<br><br>Now, MatRush has designed m for-loop instructions in the &quot;Mysterious For&quot; program, and each for-loop variable was stored in an array a[], whose length is m.<br><br>The variable i represents a for-loop instructions is the i-th instruction of the &quot;Mysterious For&quot; program.There only two type of for-loop instructions will occur in MatRush&apos;s &quot;Mysterious For&quot; program:<br><br><strong>1-type:</strong> if a for-loop belongs to 1-type, it will be an instruction like this:<br>for (int a[i] = 0; a[i] &lt; n; a[i]++) {<br>&#xA0;&#xA0;&#xA0;&#xA0;...<br>}<br><br><strong>2-type: </strong>if a for-loop belongs to 2-type, it will be an instruction like this:<br>for (int a[i] = a[i - 1]; a[i] &lt; n; a[i]++) {<br>&#xA0;&#xA0;&#xA0;&#xA0;...<br>}<br><br>In addition, after the deepest for-loop instruction there will be a function called HopeYouCanACIt(), here is what&apos;s inside:<br>void HopeYouCanACIt() {<br>&#xA0;&#xA0;&#xA0;&#xA0;puts(&quot;Bazinga!&quot;);<br>}<br><br>So, the &quot;Mysterious For&quot; program, obviously, will only print some line of the saying: &quot;Bazinga!&quot;, as it designed for.<br><br>For example, we can assume that n equals to 3, and if the program has three 1-type for-loop instructions, then it will run 3<sup>3</sup>=27 times of the function HopeYouCanACIt(), so you will get 27 &quot;Bazinga!&quot; in total. But if the program has one 1-type for-loop instruction followed by two 2-type for-loop instructions, then it will run 3+2+1+2+1+1=10 times of that function, so there will be 10 &quot;Bazinga!&quot; on the screen.<br><br>Now MatRush has the loop length n and m loop instructions with certain type, then he want to know how many &quot;Bazinga!&quot; will appear on the screen, can you help him? The answer is too big sometimes, so you just only to tell him the answer mod his QQ number:364875103.<br><br>All for-loop instructions are surely nested. Besides, MatRush guaranteed that the first one belongs to the 1-type. That is to say, you can make sure that this program is always valid and finite. There are at most 15 1-type for-loop instructions in each program.","type":"description","format":"html","require":["katex"]},{"title":"Input","content":"First, there is an integer T(T&lt;=50), the number of test cases.<br>For every case, there are 2 lines.<br>The first line is two integer n(1&lt;=n&lt;=1000000) and m(1&lt;=m&lt;=100000) as described above.<br>The second line first comes an integer k(1&lt;=k&lt;=15), represents the number of 1-type loop instructions, then follows k distinctive numbers, each number is the i-th 1-type loop instruction&apos;s index(started from 0), you can assume the first one of this k numbers is 0 and all numbers are ascending.<br>All none 1-type loop instructions of these m one belongs to 2-type.","type":"input_format","format":"html","require":["katex"]},{"title":"Output","content":"For each certain &quot;Mysterious For&quot; program, output one line, &quot;Case #T: ans&quot;, where T stands for the case number started with 1, and ans is the number of &quot;Bazinga!&quot; mod 364875103.","type":"output_format","format":"html","require":["katex"]},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">5\n3 3\n3 0 1 2\n3 3\n1 0\n3 3\n2 0 2\n4 4\n4 0 1 2 3\n10 10\n10 0 1 2 3 4 5 6 7 8 9</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">Case #1: 27\nCase #2: 10\nCase #3: 18\nCase #4: 256\nCase #5: 148372219\n<div style=\"font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\"><div style=\"font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\"><i>Hint</i></div>\nFor the third program, the code is like this:\nfor (int a[0] = 0; a[0] &lt; n; a[0]++) {\n\tfor (int a[1] = a[0]; a[1] &lt; n; a[1]++) {\n\t\tfor (int a[2] = 0; a[2] &lt; n; a[2]++) {\n\t\t\tHopeYouCanACIt();\n\t\t}\n\t}\n}\nBecause n = 3, the answer is 3*3+2*3+1*3=18.\n</div><i style=\"font-size:1px\"> </i></div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=2012+Multi-University+Training+Contest+8&amp;source=1&amp;searchmode=source\"> 2012 Multi-University Training Contest 8 </a> ","type":"source","format":"html","require":["katex"]}]}