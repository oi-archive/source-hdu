{"title":"Assembling Services","time_limit":1000,"memory_limit":32,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=3230","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=3230&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=3230","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=3230"},"statement":[{"title":"Problem Description","content":"In this problem, you need to simulate the execution of <i>n</i> service programs <i>P<sub>1</sub></i>, <i>P<sub>2</sub></i>, ..., <i>P<sub>n</sub></i>. Each program is described with sequence of integers: <i>T I in<sub>1</sub> in<sub>2</sub> ... in<sub>I</sub> O out<sub>1</sub> out<sub>2</sub> ... out<sub>O</sub></i>, that means it takes <i>T</i> unit time to execute, needs <i>I</i> input variables (i.e. <i>in<sub>1</sub> in<sub>2</sub> ... in<sub>I</sub></i>), and sets <i>O</i> output variables (i.e. <i>out<sub>1</sub> out<sub>2</sub> ... out<sub>O</sub></i>) when it finishes running. A program can be started if and only if all these <i>T</i> input variables are ready (initially available, or set by some other programs).<br><br>Imagine you have a super-computer which can execute as many programs in parallel as you like, and every variable can be read and written simultaneously by multiple programs. Your task is to calculate a particular &quot;target&quot; variable, as soon as possible.<br><br>Assume there are 4 programs, shown in the table below:<br><br><center><img style=\"max-width:100%;\" src=\"../../../data/images/3230-1.JPG\"></center><br>The quickest time to get <i>X<sub>5</sub></i> is 7, if only <i>X<sub>1</sub></i> is available at startup.<br><br>You also need to construct an expression that shows <b>how to execute the programs to achieve the minimal time</b>. The grammar of the expression is recursive:<br><ul><li><b>Single Program</b>: Px, where 1 &lt;= x &lt;= n. (i.e. P2, P499, etc). Meaning: execute the program immediately. Then end of this program marks the end of this expression.</li><br><li><b>Execute in serial</b>: (S1S2...Sk), where every Si is an expression. Note that the outermost pair of parentheses is mandatory. Meaning: execute expression S1, then S2 immediately after S1 ends, then S3 immediately after S2 ends, ..., and finally Sk immediately after Sk-1 ends. Then end of expression Sk marks the end of the whole expression.</li><br><li><b> Execute in parallel</b>: (S1|S2|...|Sk), where every Si is an expression. Note that the outermost pair of parentheses is mandatory. Meaning: execute expressions S1, S2, ..., and Sk simultaneously. The end of last finished expression marks the end of the whole expression.</li></ul>One of the possible expressions for the example above is (((P1P3)|P2)P4). (P1P2P3P4)is not acceptable, since <i>X<sub>5</sub></i> is available at time 10 in that expression, later than the optimal time 7.","type":"description","format":"html"},{"title":"Input","content":"There will be at most 100 test cases. Each case begins with three integers <i>n, m, o</i>(1 &lt;= <i>n,m</i> &lt;= 500, 1 &lt;= <i>o</i> &lt;= <i>m</i>). The number of programs is <i>n</i>, the number of variables is <i>m</i>, and the target variable is <i>X<sub>o</sub></i>. Variables are numbered 1 to <i>m</i>, programs are numbered 1 to <i>n</i>. The next line contains a 01 string of <i>m</i> characters. The <i>i</i>-th character is 1 if and only if the <i>i</i>-th variable is initially available. The target variable is guaranteed to be unavailable at startup. The following <i>n</i> lines describe the programs. Each line begins with an integer <i>T</i>(1 &lt;= <i>T</i> &lt;= 100), the execution time, and an integer <i>I</i> followed by <i>I</i> integers <i>in<sub>1</sub>, in<sub>2</sub>, ..., in<sub>I</sub></i>, as stated above, then an integer <i>O</i> followed by <i>O</i> integers <i>out<sub>1</sub>, out<sub>2</sub>, ..., out<sub>O</sub></i>. 1 &lt;= <i>in<sub>i</sub>,out<sub>i</sub></i> &lt;= <i>m</i>, 1 &lt;= <i>I,O</i> &lt;= 10. The last test case is followed by <i>n=m=o=0</i>, which should not be processed.","type":"input_format","format":"html"},{"title":"Output","content":"For each test case, print the case number and the total time needed to get the target variable. If it&apos;s not possible to get the target variable, print -1 in stead.<br><br>If it&apos;s possible to get the target variable, print the expression after that, in the same line. Be sure to print a valid expression having at most 10,000 characters, with each program printed at most once. There should be no whitespace characters within the expression.<br><br>To make this problem a little bit easier, it&apos;s allowed that some programs finish <b>after</b> the optimal time, as long as the target variable is available at the optimal time. You&#x2019;re also allowed to print redundant parentheses (pay attention to the expression length, though). If such an expression does not exist, print &quot;Can&apos;t do in serial-parallel.&quot;, without quotes.<br><br>Print a blank line after the output of each test case.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">4 5 5\n10000\n2 1 1 1 2\n3 1 1 1 3\n4 1 2 1 4\n1 2 3 4 1 5\n1 2 1\n01\n31 1 2 1 1\n3 5 5\n10100\n3 1 1 1 2\n1 1 3 1 4\n3 2 4 2 1 5\n1 3 3\n100\n1 1 1 1 2\n0 0 0</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">Case 1: 7 (((P1P3)|P2)P4)\n\nCase 2: 31 P1\n\nCase 3: 6 ((P1P3)|P2)\n\nCase 4: -1\n\n<div style=\"font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\"><div style=\"font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\"><i>Hint</i></div><b>Explanation</b>\n\nAfter a variable is set, it&apos;ll keep available forever. That&apos;s why P3 can be executed, in the third example.\n\nAlso note that there are some other correct expressions for the first sample, e.g.((P1P3P4)|P2). You can even print (((P1P3)P4)|P2) or ((P1(P3P4))|P2). Any one\n of them is acceptable in this problem.</div><i style=\"font-size:1px\"> </i></div></pre>","type":"example","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=2009+Asia+Wuhan+Regional+Contest+Hosted+by+Wuhan+University&amp;source=1&amp;searchmode=source\"> 2009 Asia Wuhan Regional Contest Hosted by Wuhan University </a> ","type":"source","format":"html"}]}