{"title":"Beautiful Soup","time_limit":1000,"memory_limit":32,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=4782","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=4782&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=4782","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=4782"},"statement":[{"title":"Problem Description","content":"&#x3000;&#x3000;Coach Pang has a lot of hobbies. One of them is playing with &#x201C;tag soup&#x201D; with the help of Beautiful Soup. Coach Pang is satisfied with Beautiful Soup in every respect, except the prettify() method, which attempts to turn a soup into a nicely formatted string. He decides to rewrite the method to prettify a HTML document according to his personal preference. But Coach Pang is always very busy, so he gives this task to you. Considering that you do not know anything about &#x201C;tag soup&#x201D; or Beautiful Soup, Coach Pang kindly left some information with you:<br>&#x3000;&#x3000;In Web development, &#x201C;tag soup&#x201D; refers to formatted markup written for a web page that is very much like HTML but does not consist of correct HTML syntax and document structure. In short, &#x201C;tag soup&#x201D; refers to messy HTML code.<br>&#x3000;&#x3000;Beautiful Soup is a library for parsing HTML documents (including &#x201C;tag soup&#x201D;). It parses &#x201C;tag soup&#x201D; into regular HTML documents, and creates parse trees for the parsed pages.<br>&#x3000;&#x3000;The parsed HTML documents obey the rules below.<br><br><b>HTML</b><br>&#x3000;&#x3000;HTML stands for HyperText Markup Language.<br>&#x3000;&#x3000;HTML is a markup language.<br>&#x3000;&#x3000;A markup language is a set of markup tags.<br>&#x3000;&#x3000;The tags describe document content.<br>&#x3000;&#x3000;HTML documents consist of tags and texts.<br><br><b>Tags</b><br>&#x3000;&#x3000;HTML is using tags for its syntax.<br>&#x3000;&#x3000;A tag is composed with special characters: &#x2018;&lt;&#x2019;, &#x2018;&gt;&#x2019; and &#x2018;/&#x2019;.<br>&#x3000;&#x3000;Tags usually come in pairs, the opening tag and the closing tag.<br>&#x3000;&#x3000;The opening tag starts with &#x201C;&lt;&#x201D; and the tagname. It usually ends with a &#x201C;&gt;&#x201D;.<br>&#x3000;&#x3000;The closing tag starts with &#x201C;&lt;/&#x201D; and the same tagname as the corresponding opening tag. It ends with a &#x201C;&gt;&#x201D;.<br>&#x3000;&#x3000;There will not be any other angle brackets in the documents.<br>&#x3000;&#x3000;Tagnames are strings containing only lowercase letters.<br>&#x3000;&#x3000;Tags will contain no line break (&#x2018;\\n&#x2019;).<br>&#x3000;&#x3000;Except tags, anything occured in the document is considered as text content.<br><br><b>Elements</b><br>&#x3000;&#x3000;An element is everything from an opening tag to the matching closing tag (including the two tags).<br>&#x3000;&#x3000;The element content is everything between the opening and the closing tag.<br>&#x3000;&#x3000;Some elements may have no content. They&#x2019;re called empty elements, like &lt;hr&gt;&lt;/hr&gt;.<br>&#x3000;&#x3000;Empty elements can be closed in the opening tag, ending with a &#x201C;/&gt;&#x201D; instead of &#x201C;&gt;&#x201D;.<br>&#x3000;&#x3000;All elements are closed either with a closing tag or in the opening tag.<br>&#x3000;&#x3000;Elements can have attributes.<br>&#x3000;&#x3000;Elements can be nested (can contain other elements).<br>&#x3000;&#x3000;The &lt;html&gt; element is the container for all other elements, it will not have any attributes.<br><br><b>Attributes</b><br>&#x3000;&#x3000;Attributes provide additional information about an element.<br>&#x3000;&#x3000;Attributes are always specified in the opening tag after the tagname.<br>&#x3000;&#x3000;Tag name and attributes are separated by single space.<br>&#x3000;&#x3000;An element may have several attributes.<br>&#x3000;&#x3000;Attributes come in name=&quot;value&quot; pairs like class=&quot;icpc&quot;.<br>&#x3000;&#x3000;There will not be any space around the &apos;=&apos;.<br>&#x3000;&#x3000;All attribute names are in lowercase.<br><br><b>A Simple Example</b> &lt;a href=&quot;http://icpc.baylor.edu/&quot;&gt;ACM-ICPC&lt;/a&gt;<br>&#x3000;&#x3000;The &lt;a&gt; element defines an HTML link with the &lt;a&gt; tag.<br>&#x3000;&#x3000;The link address is specified in the href attribute.<br>&#x3000;&#x3000;The content of the element is the text &#x201C;ACM-ICPC&#x201D;<br>&#x3000;&#x3000;<br>&#x3000;&#x3000;You are feeling dizzy after reading all these, when Coach Pang shows up again. He starts to spout for hours about his personal preference and you catch his main points with difficulty. Coach Pang says:<br><br>&#x3000;&#x3000;Your task is to write a program that will turn parsed HTML documents into formatted parse trees. You should print each tag or text content on its own line preceded by a number of spaces that indicate its depth in the parse tree. The depth of the root of the a parse tree (the &lt;html&gt; tag) is 0. He is satisfied with the tags, so you shouldn&#x2019;t change anything of any tag. For text content, throw away unnecessary white spaces including space (ASCII code 32), tab (ASCII code 9) and newline (ASCII code 10), so that words (sequence of characters without white spaces) are separated by single space. There should not be any trailing space after each line nor any blank line in the output. The line contains only white spaces is also considered as blank line. You quickly realize that your only job is to deal with the white spaces.","type":"description","format":"html"},{"title":"Input","content":"&#x3000;&#x3000;The first line of the input is an integer T representing the number of test cases.<br>&#x3000;&#x3000;Each test case is a valid HTML document starts with a &lt;html&gt; tag and ends with a &lt;/html&gt; tag. See sample below for clarification of the input format.<br>&#x3000;&#x3000;The size of the input file will not exceed 20KB.","type":"input_format","format":"html"},{"title":"Output","content":"&#x3000;&#x3000;For each test case, first output a line &#x201C;Case #x:&#x201D;, where x is the case number (starting from 1).<br>&#x3000;&#x3000;Then you should write to the output the formatted parse trees as described above. See sample below for clarification of the output format.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">2\n&lt;html&gt;&lt;body&gt;\n&lt;h1&gt;ACM\nICPC&lt;/h1&gt;\n&lt;p&gt;Hello&lt;br/&gt;World&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;\n&lt;html&gt;&lt;body&gt;&lt;p&gt;\nAsia Chengdu Regional&lt;/p&gt;\n&lt;p class=&quot;icpc&quot;&gt;\nACM-ICPC&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">[pre]Case #1:\n&lt;html&gt;\n &lt;body&gt;\n  &lt;h1&gt;\n   ACM ICPC\n  &lt;/h1&gt;\n  &lt;p&gt;\n   Hello\n   &lt;br/&gt;\n   World\n  &lt;/p&gt;\n &lt;/body&gt;\n&lt;/html&gt;\nCase #2:\n&lt;html&gt;\n &lt;body&gt;\n &lt;p&gt;\n   Asia Chengdu Regional\n  &lt;/p&gt;\n  &lt;p class=&quot;icpc&quot;&gt;\n   ACM-ICPC\n  &lt;/p&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n[/pre]\n<div style=\"font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\"><div style=\"font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\"><i>Hint</i></div>\nPlease be careful of the number of leading spaces of each line in above sample output.\n</div><i style=\"font-size:1px\"> </i></div></pre>","type":"example","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=2013+Asia+Chengdu+Regional+Contest+&amp;source=1&amp;searchmode=source\"> 2013 Asia Chengdu Regional Contest  </a> ","type":"source","format":"html"}]}