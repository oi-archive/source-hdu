{"title":"Best ACMer Solves the Hardest Problem","time_limit":12000,"memory_limit":855.43359375,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=6454","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=6454&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=6454","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=6454"},"statement":[{"title":"Problem Description","content":"One day an excellent ACMer will leave the field to face new challenges, just like what the predecessors are doing.<br>Some of them have taken over their family businesses, and some of them are struggling with the edges of unemployment.<br>Some of them have the courage to display themselves and become a professional Ingress player, and some of them are still pushing themselves to limits and try to solve all problems in Project Euler.<br><br>But all these destinations are so shallow for Benecol de Cecco, the former king.<br>What he does now is to be the best respondents in StackOverflow.<br>StackOverflow is the largest, most trusted online community for developers to learn, share their programming knowledge, and build their careers.<br><br>Today, he notices a question which is posted by Kevin Li, saying:<br>Recently, I implemented an experiment where I need to find all the data records whose Euclidean distances to the query point $q$ are the same value $r$.<br>I tried to use the k-d tree to improve the search efficiency.<br>However, I found that the k-d tree needs to traverse all leaf nodes to return the result, that is, it still needs to compare all dataset to obtain the result.<br><br>This question can be formalized to build a database with real-time queries and modifications.<br>In the beginning, suppose we have $n$ different points in the plane.<br>The $i$-th point is located at $(x_i, y_i)$ and has a weight $w_i$.<br>Then we consider several queries and modifications dynamically given by<br><br>$1$ $x$ $y$ $w$, to insert a new point at $(x, y)$ of weight $w$, where we guarantee that before the operation no point was located in the place;<br>$2$ $x$ $y$, to delete the point located at $(x, y)$, where we guarantee that the point existed before the operation;<br>$3$ $x$ $y$ $k$ $w$, for each point whose Euclidean distance to $(x, y)$ is $\\sqrt{k}$, to increase its weight by $w$;<br>$4$ $x$ $y$ $k$, to query the sum of weights for all points whose Euclidean distances to $(x, y)$ are $\\sqrt{k}$.<br><br>Benecol de Cecco says this question is pretty easy and he asked me to share the problem with you all.<br>By the way, the Euclidean distance between two points $(x_0, y_0)$ and $(x_1, y_1)$ is equal to $\\sqrt{(x_0 - x_1)^2 + (y_0 - y_1)^2}$.<br><br>","type":"description","format":"html","require":["katex"]},{"title":"Input","content":"The input contains several test cases, and the first line contains a positive integer $T$ indicating the number of test cases which is up to $1000$.<br><br>For each test case, the first line contains two integers $n$ and $m$ indicating the initial number of points in the plane and the number of operations respectively, where $1 \\le n, m \\le 10^5$.<br><br>Each of the following $n$ lines contains three integers $x, y$ and $w$ satisfying $1 \\le x, y, w \\le 6000$, which describe a point at $(x, y)$ of weight $w$ in the beginning.<br><br>Each of the following $m$ lines contains an operation which can be a query or a modification.<br>These operations are given in the forms described above.<br>To make all $x$ and $y$ in operations dynamic, we use $lastans$ to denote the answer to the most recent query and its initial value is zero.<br>For each operation with the values $x$ and $y$ in input, their real values should be $(((x + lastans) \\bmod 6000) + 1)$ and $(((y + lastans) \\bmod 6000) + 1)$ respectively.<br>All coefficients in operations are integers and satisfy $0 \\le k \\leq 10^7$ and $1 \\le x, y, w \\le 6000$.<br><br>We guarantee that the sum of $n$ and the sum of $m$ in all test cases are no larger than $10^6$ individually.<br>","type":"input_format","format":"html","require":["katex"]},{"title":"Output","content":"For each test case, output a line containing &quot;Case #x:&quot; (without quotes) at first, where $x$ is the test case number starting from $1$.<br><br>Then for each query, output an integer in a line indicating the answer.<br>","type":"output_format","format":"html","require":["katex"]},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">1\n3 6\n2999 3000 1\n3001 3000 1\n3000 2999 1\n1 2999 3000 1\n4 2999 2999 1\n2 2995 2996\n3 2995 2995 1 1\n4 2995 2995 1\n4 3000 3000 1</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">Case #1:\n4\n6\n0\n\n<div style=\"font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\"><div style=\"font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\"><i>Hint</i></div>\nIn the sample case, if we ignore the special input format for dynamic x and y in operations, here we can show these modifications and queries directly in an offline format as follows:\n\n1 3000 3001 1\n4 3000 3000 1\n2 3000 3001\n3 3000 3000 1 1\n4 3000 3000 1\n4 3007 3007 1\n\n</div><i style=\"font-size:1px\"> </i></div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=The+43rd+ACM+International+Collegiate+Programming+Contest+Asia+Shenyang+Regional+Contest&amp;source=1&amp;searchmode=source\"> The 43rd ACM International Collegiate Programming Contest Asia Shenyang Regional Contest </a> ","type":"source","format":"html","require":["katex"]}]}