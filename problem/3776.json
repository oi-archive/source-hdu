{"title":"Task","time_limit":5000,"memory_limit":32,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=3776","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=3776&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=3776","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=3776"},"statement":[{"title":"Problem Description","content":"In most recipes, certain tasks have to be done before others. For each task, if we are given a list of other tasks that it depends on, then it is relatively straightforward to come up with a schedule of tasks that satisfies the dependencies and produces a stunning dish. Many of us know that this can be solved by some algorithm called toplogical sort.<br><br>But life is not so easy sometimes. For example, here is a recipe for making pizza dough:<br><br>1.Mix the yeast with warm water, wait for 5 to 10 minutes.<br>2.Mix the the remaining ingredients 7 to 9 minutes.<br>3.Mix the yeast and the remaining ingredients together for 10 to 15 minutes.<br>4.Wait 90 to 120 minutes for the dough to rise.<br>5.Punch the dough and let it rest for 10 to 15 minutes.<br>6.Roll the dough.<br>In this case, tasks 1 and 2 may be scheduled after the first minute (we always spend the first minute to read the recipe and come up with a plan). The earliest task 3 may be started is at 8 minutes, and task 4 may start at 18 minutes after the start, and so on. This recipe is relatively simple, but if some tasks have many dependent tasks then scheduling can become unmanageable. Sometimes, the recipe may in fact be impossible to execute. For example, consider the following abstract recipe:<br><br>1.task 1<br>2.after task 1 but within 2 minutes of it, do task 2<br>3.at least 3 minutes after task 2 but within 2 minutes of task 1, do task 3<br>In this problem, you are given a number of tasks. Some tasks are related to another based on their starting times. You are asked to assign a starting time to each task to satisfy all constraints if possible, or report that no valid schedule is possible.","type":"description","format":"html","require":["katex"]},{"title":"Input","content":"The input consists of a number of cases. The first line of each case gives the number of tasks n, (1 &#x2264; n &#x2264; 100). This is followed by a line containing a non-negative integer m giving the number of constraints. Each of the next m lines specify a constraint. The two possible forms of constraints are:<br><br>task i starts at least A minutes later than task j<br>task i starts within A minutes of the starting time of task j<br>where i and j are the task numbers of two different tasks (1 &#x2264; i, j &#x2264; n), and A is a non-negative integer (A &#x2264; 150). The first form states that task i must start at least A minutes later than the start time of task j. The second form states that task i must start no earlier than task j, and within A minutes of the starting time of task j. There may be multiple constraints involving the same pair of tasks. Note that at least and within include the end points (i.e. if task 1 starts at 1 minute and task 2 starts at 4 minutes, then task 2 starts at least 3 minutes later than task 1, and within 3 minutes of the starting time of task 1).<br><br>The input is terminated by n = 0.","type":"input_format","format":"html","require":["katex"]},{"title":"Output","content":"For each case, output a single line containing the starting times of task 1 through task n separated by a single space. Each starting time should specify the minute at which the task starts. The starting time of each task should be positive and less than 1000000. There may be many possible schedules, and any valid schedule will be accepted. If no valid schedule is possible, print Impossible. on a line instead.","type":"output_format","format":"html","require":["katex"]},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">6\n10\ntask 3 starts at least 5 minutes later than task 1\ntask 3 starts within 10 minutes of the starting time of task 1\ntask 3 starts at least 7 minutes later than task 2\ntask 3 starts within 9 minutes of the starting time of task 2\ntask 4 starts at least 10 minutes later than task 3\ntask 4 starts within 15 minutes of the starting time of task 3\ntask 5 starts at least 90 minutes later than task 4\ntask 5 starts within 120 minutes of the starting time of task 4\ntask 6 starts at least 10 minutes later than task 5\ntask 6 starts within 15 minutes of the starting time of task 5\n3\n4\ntask 2 starts at least 0 minutes later than task 1\ntask 2 starts within 2 minutes of the starting time of task 1\ntask 3 starts at least 3 minutes later than task 2\ntask 3 starts within 2 minutes of the starting time of task 1\n0</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">3 1 8 18 108 118\nImpossible.</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=HDOJ%BF%AA%B7%C5%CA%BD%BD%F8%BD%D7%D1%B5%C1%B7%2811%29%A1%AA%A1%AA%C8%AB%B3%CC%B2%E2%CA%D4&amp;source=1&amp;searchmode=source\"> HDOJ&#x5F00;&#x653E;&#x5F0F;&#x8FDB;&#x9636;&#x8BAD;&#x7EC3;(11)&#x2014;&#x2014;&#x5168;&#x7A0B;&#x6D4B;&#x8BD5; </a> ","type":"source","format":"html","require":["katex"]}]}