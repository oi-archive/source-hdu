{"title":"Multi-bit Trie","time_limit":1000,"memory_limit":32,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=4570","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=4570&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=4570","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=4570"},"statement":[{"title":"Problem Description","content":"&#x3000;&#x3000;IP lookup is one of the key functions of routers for packets forwarding and classifying. Generally, IP lookup can be simplified as a Longest Prefix Matching (LPM) problem. That&apos;s to find the longest prefix in the Forwarding Information Base (FIB) that matches the input packet&apos;s destination address, and then output the corresponding Next Hop information.<br><center><img style=\"max-width:100%;\" src=\"../../data/images/C468-1006-1.jpg\"></center><br>&#x3000;&#x3000;Trie-based solution is the most wildly used one to solve LPM. As shown in Fig.1(b), an uni-bit trie is just a binary tree. Processing LPM on it needs only traversing it from the root to some leaf, according to the input packet&apos;s destination address. The longest prefix along this traversing path is the matched one. In order to reduce the memory accesses for one lookup, we can compress some consecutively levels of the Uni-bit Trie into one level, transforming the Uni-bit Trie into a Multi-bit Trie.<br>&#x3000;&#x3000;For example, suppose the strides array is {3, 2, 1, 1}, then we can transform the Uni-bit Trie shown in Fig.1(b) into a Multi-bit Trie as shown in Fig.1(c). During the transforming process, some prefixes must be expanded. Such as 11(P2), since the first stride is 3, it should be expanded to 110(P2) and 111(P2). But 110(P5) is already exist in the FIB, so we only store the longer one 110(P5).<br>&#x3000;&#x3000;Multi-bit Trie can obviously reduce the tree level, but the problem is how to build a Multi-bit Trie with the minimal memory consumption (the number of memory units). As shown in Fig.1, the Uni-bit Trie has 23 nodes and consumes 46 memory units in total, while the Multi-bit Trie has 12 nodes and consumes 38 memory units in total.","type":"description","format":"html","require":["katex"]},{"title":"Input","content":"&#x3000;&#x3000;The first line is an integer T, which is the number of testing cases.<br>&#x3000;&#x3000;The first line of each case contains one integer L, which means the number of levels in the Uni-bit Trie.<br>&#x3000;&#x3000;Following L lines indicate the nodes in each level of the Uni-bit Trie.<br>&#x3000;&#x3000;Since only 64 bits of an IPv6 address is used for forwarding, a Uni-bit Trie has maximal 64 levels. Moreover, we suppose that the stride for each level of a Multi-bit Trie must be less than or equal to 20.","type":"input_format","format":"html","require":["katex"]},{"title":"Output","content":"&#x3000;&#x3000;Output the minimal possible memory units consumed by the corresponding Multi-bit Trie.","type":"output_format","format":"html","require":["katex"]},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">1\n7\n1\n2\n4\n4\n5\n4\n3</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">38</div></pre>","type":"example","format":"html","require":["katex"]},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=2013+ACM-ICPC%B3%A4%C9%B3%C8%FC%C7%F8%C8%AB%B9%FA%D1%FB%C7%EB%C8%FC%A1%AA%A1%AA%CC%E2%C4%BF%D6%D8%CF%D6&amp;source=1&amp;searchmode=source\"> 2013 ACM-ICPC&#x957F;&#x6C99;&#x8D5B;&#x533A;&#x5168;&#x56FD;&#x9080;&#x8BF7;&#x8D5B;&#x2014;&#x2014;&#x9898;&#x76EE;&#x91CD;&#x73B0; </a> ","type":"source","format":"html","require":["katex"]}]}