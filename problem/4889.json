{"title":"Scary Path Finding Algorithm","time_limit":1000,"memory_limit":64,"operation":{"submit":"http://acm.hdu.edu.cn/submit.php?pid=4889","submissions":"http://acm.hdu.edu.cn/status.php?first=&pid=4889&user=&lang=0&status=0","statistics":"http://acm.hdu.edu.cn/statistic.php?pid=4889","discussion":"http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=4889"},"statement":[{"title":"Problem Description","content":"   Fackyyj loves the challenge phase in TwosigmaCrap(TC). One day, he meet a task asking him to find shortest path from vertex 1 to vertex n, in a graph with at most n vertices and m edges. (1 &#x2264; n &#x2264; 100,0 &#x2264; m &#x2264; n(n-1))<br><br>   Fackyyj solved this problem at first glance, after that he opened someone&apos;s submission, spotted the following code:<br><br>long long spfa_slf() {<br>    int n,m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    vector&lt;pair&lt;int,int&gt; &gt; edges[111];<br>    for(int i = 0;i &lt; m;i++) {<br>        int x,y,w;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;<br>        edges[x].push_back(make_pair(y,w));<br>    }<br><br>    deque&lt;int&gt; q;<br>    vector&lt;long long&gt; dist(n+1, ~0ULL&gt;&gt;1);<br>    vector&lt;bool&gt; inQueue(n+1, false);<br>    dist[1] = 0; q.push_back(1); inQueue[1] = true;<br><br>    int doge = 0;<br>    while(!q.empty()) {<br>        int x = q.front(); q.pop_front();<br>        if(doge++ &gt; C) {<br>            puts(&quot;doge&quot;);<br>            return 233;<br>        }<br>        for(vector&lt;pair&lt;int,int&gt; &gt;::iterator it = edges[x].begin();<br>                                        it != edges[x].end();++it) {<br>            int y = it-&gt;first;<br>            int w = it-&gt;second;<br>            if(dist[y] &gt; dist[x] + w) {<br>                dist[y] = dist[x] + w;<br>                if(!inQueue[y]) {<br>                    inQueue[y] = true;<br>                    if(!q.empty() &amp;&amp; dist[y] &gt; dist[q.front()])<br>                        q.push_back(y);<br>                    else<br>                        q.push_front(y);<br>                }<br>            }<br>        }<br>        inQueue[x] = false;<br>    }<br>    return dist[n];<br>}<br><br>   Fackyyj&apos;s face lit up with an evil smile. He immediately clicked button &quot;Challenge!&quot;, but due to a hard disk failure, all of his test case generators were lost! Fackyyj had no interest on recreating his precise generators, so he asked you to write one. The generator should be able to generate a test case with at most 100 vertices, and it must be able to fail the above code, i.e. let the above code print &quot;doge&quot;. It should <b>NOT</b> contain any negative-cost loop.<br><br>&#x3000;For those guys who doesn&apos;t know C++, Fackyyj explain the general idea of the above algorithm by the following psuedo-code:<br><br><center><img style=\"max-width:100%;\" src=\"../../data/images/C504-1003-1.jpg\"></center>","type":"description","format":"html"},{"title":"Input","content":"   Input contains several test cases, please process till EOF.<br>   For each test case, there will be a single line containing an integer C. It is the constant C in the above code. (C &lt;= 23333333)","type":"input_format","format":"html"},{"title":"Output","content":"   For each test case, on the first line, print two integers, n and m, indicating the number of vertices and the number of edges of your graph. Next m lines, on each line print <b>x</b> <b>y</b> <b>w</b>, means there is a road from x to y, cost w.<br>   1 &#x2264; n &#x2264; 100,0 &#x2264; m &#x2264; n(n-1),|w| &lt; 2<sup>31</sup>. Note that your output shouldn&apos;t contain any negative-cost loop.","type":"output_format","format":"html"},{"title":"Sample Input","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">1</div></pre>","type":"example","format":"html"},{"title":"Sample Output","content":"<pre><div style=\"font-family:Courier New,Courier,monospace;\">4 3\n1 2 1\n2 3 1\n3 4 1</div></pre>","type":"example","format":"html"},{"title":"Author","content":"Fudan University","type":"source","format":"html"},{"title":"Source","content":" <a href=\"/search.php?field=problem&amp;key=2014+Multi-University+Training+Contest+3&amp;source=1&amp;searchmode=source\"> 2014 Multi-University Training Contest 3 </a> ","type":"source","format":"html"}]}